import java.util.Scanner;


public class Dijkstra_Shortest_Reach_2 {

    static Scanner scanner=new Scanner(System.in);
    
    static int testCases,node,edges,a,b,weight,source;
    
    static int findMin(int dis[],boolean []visited){
        
        int min=Integer.MAX_VALUE,index=-1;
        
        for(int i=0;i<node;i++){
            
            if( !visited[i] && ( index==-1 || dis[i]<dis[index] ) ){
                
                index=i;
                
            }
    
           // System.out.println("I stopped here");
            
        }
    
        return index;
        
    }
    
    static void solve(){
        
        node=scanner.nextInt();
        edges=scanner.nextInt();
        
      //  Map<Integer,Integer> set=new HashMap<>();
        
       // Set< Map<Integer,Integer> > set=new HashSet<>();
        
        int mat[][]=new int[node][node];
        
        boolean visited[]=new boolean[node];
        
        int dis[]=new int[node];
        
        for(int i=0;i<edges;i++){
            
            a=scanner.nextInt()-1;
            b=scanner.nextInt()-1;
            
            weight=scanner.nextInt();
            
            //Map<Integer,Integer> m=new HashMap<>();
            
            //Map<Integer,Integer> mn=new HashMap<>();
            
            //m.put(a, b);
            //mn.put(b, a);
            
            //if( !set.contains(m) ){
            
            if( mat[a][b]!=0 ){
            
            mat[a][b]= Math.min(mat[a][b] ,weight);
       
            }else{
                
                mat[a][b]=weight;
                
            }
            
           // set.add(m);
            
            //}
            
            //if( !set.contains(mn) ){
            
            if( mat[b][a]!=0 ){
                
            mat[b][a]=Math.min(mat[b][a],weight);
       
            }else{
            
            mat[b][a]=weight;
            
        }
            
            //set.add(a);
            //set.add(mn);
            
            //}
            
            
           // System.out.println("I stop here");
            
        }
        
        source=scanner.nextInt()-1;
        
        //System.out.println("I stop at here");
        
     //   dis[source]=0;
        
        for(int i=0;i<node;i++){
            
            if(i!=source){
            
                dis[i]=Integer.MAX_VALUE;
            
            }else{
                
                dis[i]=0;
                
            }
            
        }
        
        //System.out.println("dis: "+Arrays.toString(dis));
        
        for(int i=0;i<node-1;i++){
            
            int u=findMin(dis,visited);
            
            if( u==-1 ){
                
                break;
                
            }
            
            try{
                
                visited[u]=true;
                
            }catch(Exception e){
                
break;
                
            }
            
            for(int j=0;j<node;j++){
                
                if( mat[u][j]!=0 && !visited[j] && dis[u]!=Integer.MAX_VALUE ){
                    
                    int newDistance=mat[u][j]+dis[u];
                    
                    if( newDistance<dis[j] ){
                        
                        dis[j]=newDistance;
                        
                    }
                    
                }
                
            //    System.out.println("I stopped here");
                
            }
            
        }
        
        for(int i=0;i<node;i++){
            
            if(i!=source){
        
                if( dis[i]==Integer.MAX_VALUE ){
                    
                    System.out.print((-1)+" ");
                    
                }else{
                
                System.out.print(dis[i]+" ");
                
                }
                
            }
            
        }
        
        System.out.println();
        
    }
    
    public static void main(String[] args) {
        
        testCases=scanner.nextInt();
        
        for(int i=0;i<testCases;i++){
            
        solve();    
            
        }
        
    }
    
}
/*1
4 4
1 2 24
1 4 20
3 1 3
4 3 12
1*/

/*1
5 3
1 2 10
1 3 6
2 4 8
2*/
