import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class Simple_Text_Editor {

    static Scanner scanner=new Scanner();
    
    static int n,type;
    
    static String ans=("");
    
    static class Node{
        
        String data;
        
        Node next;

        public Node(String data) {
            
            this.data = data;
        
            this.next=null;
            
        }

        public String getData() {
            return data;
        }

        public void setData(String data) {
            this.data = data;
        }

        public Node getNext() {
            return next;
        }

        public void setNext(Node next) {
            this.next = next;
        }
       
    }
    
    static class Stack{
        
        int length;
        Node node;

        public Stack() {
        
            length=0;
            node=null;
            
        }
    
        void push( String data ){
            
         //   ans.append(data);
            
            Node top=new Node(data);
            
            top.setNext(node);
            
            node=top;
            
            length++;
            
        }
    
        boolean isEmpty(){
            
            return length==0;
            
        }
        
        String pop() throws Exception{
            
           if( isEmpty() ){
               
               throw new Exception("The stack is empty");
               
           } 
            
           String res=node.getData();
           
           node=node.getNext();
           
           length--;
           
           return res;
           
        }
        
        String peek() throws Exception{
            
            if( isEmpty() ){
                
                return ("");
                
            }
            
            /*if( "".equals(node.getData().toString()) ){
                
                pop();
                        
                
            }*/
            
            return node.getData();
            
        }
        
        int size(){
            
            return length;
            
        }
        
    }
    
    static Stack stack=new Stack();
    
    public static void main(String[] args) throws IOException, Exception {
        
        n=scanner.nextInt();
        
        stack.push(ans);
        
        for(int i=0;i<n;i++){
            
            type=scanner.nextInt();
            
            switch (type) {
                case 1:
                    
                    StringBuilder sb=new StringBuilder();
                    
                    sb.append( scanner.next() );
             
                    ans+=sb.toString();
                    
                    stack.push( ans );
           
                   // ans.append(sb);
                    
                    //System.out.println("ans: "+ans);
                    
                    break;
                case 2:
                    {
                        int k=scanner.nextInt();
                      
                  //      stack.push(ans);
                        
                    //    System.out.println("ans before: "+ans);
                        
                   //     ans.delete(Math.abs(ans.length()-k), ans.length());
                   
 ans=(ans.substring(0, Math.abs(ans.length()-k) ));
 
                        stack.push(ans);
 
                     //   System.out.println("ans2: "+ans+" k: "+k);           
                        
                      //  System.out.println("ans now: "+ans);
                      
                        //System.out.println("stack top: "+stack.peek());
                        
                        break;
                    }
                case 3:
                    {
                   
                        int k=scanner.nextInt();
                        
                        try{
                        
                        System.out.println( ans.charAt(k-1) );
                        
                        }catch(Exception e){
                            
 //                           System.out.println("ans: "+ans+" k: "+k);
                            
                        }
                        
                        break;
                    }
                default:
            
                 //   ans=stack.peek();
                 
                    try{
                    
                    stack.pop();
                    
                    ans=stack.peek();
                    
                    //System.out.println("ans4: "+ans);
                    
                    }catch(Exception e){
                        
                        
                    }
                    
                    break;
            
            }
            
        }
        
    }
    
    static class Scanner{
        
        BufferedReader in;
StringTokenizer st;

        public Scanner() {

            in=new BufferedReader( new InputStreamReader( System.in ) );
            
        }
        
String next() throws IOException{
    
    while( st==null || !st.hasMoreElements() ){
        
        st=new StringTokenizer( in.readLine() );
        
    }
    
    return st.nextToken();
}
        
String nextLine() throws IOException{
    
    return in.readLine();
    
}

int nextInt() throws IOException{
    
    return Integer.parseInt( next() );
    
}

long nextLong() throws IOException{
    
    return Long.parseLong( next() );
    
}

    }
    
}
/*

8
1 abc
3 3
2 3
1 xy
3 2
4 
4 
3 1

*/

/*

10
1 ewcgpjfh
1 igqsbqyp
1 qsdliigcj
4
3 15
1 iilmgp
2 8
4
2 18
1 scwhors

*/

/*30
1 zsfncpxdzl
3 4
3 6
2 1
3 7
3 2
4
2 4
2 6
4
4
1 l
1 hpe
3 6
2 7
4
3 6
4
3 6
1 zipsqagri
1 vuqxstnj
4
3 13
4
3 10
3 6
1 uzdpy
1 bupqp
1 kn
2 6

*/
