import java.io.*;
import java.util.*;

public class Solution {

    static Scanner in = new Scanner(System.in);
    
    static int n, m, start, end;
    
    static int u[], v[];
    static long w[];
    
    static void solve() {
        
        graph g[] = new graph[m];
        
        for(int i = 0; i < m; ++i) {
            
            g[i] = new graph(u[i], v[i], w[i]);
            
        }
        
        List<Node> list[] = new List[n + 1]; 
        
        for(int i = 0; i <= n; ++i) {
            
            list[i] = new ArrayList();
            
        }
        
        for(int i = 0; i < m; ++i) {
            
            list[g[i].u].add(new Node(g[i].v, g[i].w));
            list[g[i].v].add(new Node(g[i].u, g[i].w));
            
        }
        
        PriorityQueue<Node> pq = new PriorityQueue<>();
        
        long distance[] = new long[n + 1];
        
        for(int i = 0; i <= n; ++i) {
            
            distance[i] = (long)(1E18);
            
        }
        
        distance[start] = 0L;
        
        pq.add(new Node(start, 0L));
        
        while(!pq.isEmpty()) {
            
            Node node = pq.poll();
            
            if(node.current_node == end) {
                
                break;
                
            }
            
            for(Node n : list[node.current_node]) {
                
                long dis = node.current_distance + n.current_distance;
                
                if(dis < distance[n.current_node]) {
                    
                    distance[n.current_node] = dis;
                   
                    pq.add(new Node(n.current_node, dis));
                    
                }
                
            }
            
        }
        
        System.out.println(distance[end]);
        
    }
    
    public static void main(String[] args) {
       
        n = in.nextInt();
        m = in.nextInt();
        
        u = new int[m + 1];
        v = new int[m + 1];
        w = new long[m + 1];
        
        for(int i = 0; i < m; ++i) {
            
            u[i] = in.nextInt();
            v[i] = in.nextInt();
            w[i] = in.nextLong();
            
        }
        
        start = in.nextInt();
        end = in.nextInt();
        
        solve();
        
    }
    
    static class graph {
        
        int u, v;
        long w;
        
        public graph(int u, int v, long w) {
            
            this.u = u;
            this.v = v;
            this.w = w;
            
        }
        
    }
    
    static class Node implements Comparable<Node> {
        
        int current_node;
        long current_distance;
        
        public Node(int current_node, long current_distance) {
            
            this.current_node = current_node;
            this.current_distance = current_distance;
            
        }
        
        public int compareTo(Node n) {
            
           if(n.current_distance > this.current_distance) {
               
               return -1;
               
           } else if(n.current_distance < this.current_distance) {
               
               return 1;
               
           }
            
            return 0;
            
        }
        
    }
    
}
