import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class Emas_Supercomputer {
    
    static Scanner scanner=new Scanner(System.in);
    
    static int raw,coloumn;

static class Plus{
    
    int rawIndex;
    int coloumnIndex;
    int len;
    int size;

        public Plus() {

            
            
        }

        public Plus(int rawIndex, int coloumnIndex) {
            
            this.rawIndex = rawIndex;
            this.coloumnIndex = coloumnIndex;
        
            this.len=0;
            this.size=1;
            
        }

        public Plus(int rawIndex, int coloumnIndex, int len, int size) {
            this.rawIndex = rawIndex;
            this.coloumnIndex = coloumnIndex;
            this.len = len;
            this.size = size;
        }

        public int getRawIndex() {
            return rawIndex;
        }

        public int getColoumnIndex() {
            return coloumnIndex;
        }

        public int getLen() {
            return len;
        }

        public int getSize() {
            return size;
        }
    
    void grow(){
        
        this.len=this.getLen()+1;
        this.size+=4;
        
    }
     
     boolean overlap(Plus plus,int totalRaw,int totalColoumn){
        
        if(this.getRawIndex()==plus.getRawIndex() &&
                this.getColoumnIndex()!=plus.getColoumnIndex()){
            
            if( plus.getColoumnIndex()>=this.getColoumnIndex()-this.getLen()
              && plus.getColoumnIndex()<=this.getColoumnIndex()+this.getLen() ||  
                 plus.getColoumnIndex()>this.getColoumnIndex()+this.getLen() &&
                    plus.getColoumnIndex()<this.getColoumnIndex()-this.getLen()){
                
                return true;
                
            }
            
        }
        
        if( this.getColoumnIndex()==plus.getColoumnIndex() &&
                this.getRawIndex()!=plus.getRawIndex()){
            
            if(  plus.getRawIndex()>=this.getRawIndex()-this.getLen() &&
                    plus.getRawIndex()<=this.getRawIndex()+this.getLen() ||
                    plus.getRawIndex()<this.getRawIndex()-this.getLen() &&
                    plus.getRawIndex()>this.getRawIndex()+this.getLen()){
                
                
                return true;
            }
            
        }
        
        boolean [][]gird=new boolean[totalRaw][totalColoumn];
        
        for(int i=this.getColoumnIndex()-this.getLen();i<=this.getColoumnIndex()+this.getLen();i++){
            
            gird[this.getRawIndex()][i]=true;
            
        }
        
        for(int i=this.getRawIndex()-this.getLen();i<=this.getRawIndex()+this.getLen();i++){
            
            gird[i][this.getColoumnIndex()]=true;
            
        }
        
        for(int i=plus.getColoumnIndex()-plus.getLen();i<=plus.getColoumnIndex()+plus.getLen();i++){
            
            if( gird[plus.getRawIndex()][i]==true ){
                
                return true;
                
            }
            
        }
        
        for(int i=plus.getRawIndex()-plus.getLen();i<=plus.getRawIndex()+plus.getLen();i++){
            
            if( gird[i][plus.getColoumnIndex()]==true ){
                
                return true;
                
            }
            
        }
        
        return false;
    }
    
}
    
static void findPlus(int rawIndex,int coloumnIndex,int totalRaw,int totalColoumn,char a[][],List<Plus> list ){
        
        Plus plus=new Plus(rawIndex,coloumnIndex  );
        
        int s=1;
        
        while( rawIndex-s>=0 && rawIndex+s<totalRaw
              && coloumnIndex-s>=0 && coloumnIndex+s<totalColoumn 
                && a[rawIndex+s][coloumnIndex]=='G' && a[rawIndex-s][coloumnIndex]=='G'
             && a[rawIndex][coloumnIndex-s]=='G' && a[rawIndex][coloumnIndex+s]=='G'   ){
        
            list.add( new Plus( plus.getRawIndex(),plus.getColoumnIndex(),plus.getLen(),plus.getSize() ) );
            
            plus.grow();
            
            s++;
        
        }
        
        list.add(plus);
        
    }

static List<Plus> list=new ArrayList<>();

static Plus plus=new Plus();

    public static void main(String[] args) {
        
        raw=scanner.nextInt();
        coloumn=scanner.nextInt();
        
        char a[][]=new char[raw][coloumn];
        
        for(int i=0;i<raw;i++){
            
            String s=scanner.next();
            
            for(int j=0;j<s.length();j++){
                
                a[i][j]=s.charAt(j);
                
            }
            
        }
        
        for(int i=0;i<raw;i++){
            
            for(int j=0;j<coloumn;j++){
                
                if( a[i][j]=='G' ){
                    
findPlus(i,j,raw,coloumn,a,list  );                    
                    
                }
                
            }
            
        }
        
        int max=0;
        
        for(int i=0;i<list.size()-1;i++){
            
          plus=list.get(i);
            
            for(int j=i+1;j<list.size();j++){
                
                Plus plus2=list.get(j);
                
                int mul=plus.getSize()*plus2.getSize();
                
                if( mul>max && !plus2.overlap(plus, raw, coloumn) ){
                    
                    max=mul;
                    
                }
                
            }
            
        }
        
        System.out.println(max);
        
    }
    
}
/*/*5 6
GGGGGG
GBBBGB
GGGGGG
GGBBGB
GGGGGG*/

/*6 6
BGBBGB
GGGGGG
BGBBGB
GGGGGG
BGBBGB
BGBBGB*/

/*7 7
GBGBGGB
GBGBGGB
GBGBGGB
GGGGGGG
GGGGGGG
GBGBGGB
GBGBGGB*/

/*8 8
GGGGGGGG
GBGBGGBG
GBGBGGBG
GGGGGGGG
GBGBGGBG
GGGGGGGG
GBGBGGBG
GGGGGGGG*/
