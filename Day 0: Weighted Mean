import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

class Result {

    /*
     * Complete the 'weightedMean' function below.
     *
     * The function accepts following parameters:
     *  1. INTEGER_ARRAY X
     *  2. INTEGER_ARRAY W
     */

    public static void weightedMean(List<Integer> X, List<Integer> W) {
    // Write your code here

double a[]=new double[ X.size() ];
double b[]=new double[ W.size() ];

int in=0;

double total=0;

for(int i: W){
    
    b[in++]=i;
    
    total+=i;
    
}

in=0;

for(int i: X){
    
    a[in++]=i;
    
}

double ans=0;

for(int i=0;i<a.length;i++ ){
    
    ans+=( a[i]*b[i] );
    
}

System.out.printf( "%.1f\n",(ans/total) );

    }

}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));

        int n = Integer.parseInt(bufferedReader.readLine().trim());

        List<Integer> vals = Stream.of(bufferedReader.readLine().replaceAll("\\s+$", "").split(" "))
            .map(Integer::parseInt)
            .collect(toList());

        List<Integer> weights = Stream.of(bufferedReader.readLine().replaceAll("\\s+$", "").split(" "))
            .map(Integer::parseInt)
            .collect(toList());

        Result.weightedMean(vals, weights);

        bufferedReader.close();
    }
}
