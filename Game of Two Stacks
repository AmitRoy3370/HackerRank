import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class Game_of_Two_Stacks {

    static int testCases,n,m,k;
    
    static BufferedReader in=new BufferedReader( new InputStreamReader( System.in ) );

    static void merge(int a[],int left,int right,int mid){
        
        int n1=mid-left+1;
        
        int n2=right-mid;
        
        int L[]=new int[n1];
        
        int R[]=new int[n2];
        
        for(int i=0;i<n1;i++){
            
            L[i]=a[left+i];
            
        }
        
        for(int j=0;j<n2;j++){
            
            R[j]=a[mid+1+j];
            
        }
        
        int i=0,j=0,k=left;
        
        while( i<n1 && j<n2 ){
            
            if( L[i]<=R[j] ){
                
                a[k]=L[i];
                
                i++;
                
            }else{
                
                a[k]=R[j];
                
                j++;
                
            }
            
            k++;
            
        }
        
        while( i<n1 ){
            
            a[k]=L[i];
            
            i++;
            k++;
            
        }
        
        while( j<n2 ){
            
            a[k]=R[j];
            
            j++;
            k++;
            
        }
        
    }
    
    static void mergeSort( int a[],int left,int right ){
        
        if( left>=right ){
            
            return;
            
        }
        
        int mid=(right+left)/2;
        
        mergeSort( a,left,mid );
        
        mergeSort( a,mid+1,right );
        
        merge(a,left,right,mid);
        
    }
    
    private static void solve() throws IOException, Exception {
    //    throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    
    String x[]=in.readLine().split("\\s");
    
    n=Integer.parseInt( x[0] );
    
    m=Integer.parseInt( x[1] );
    
    k=Integer.parseInt( x[2] );
    
    String y[]=in.readLine().split("\\s");
    
    int y1[]=new int[y.length];
    
    for(int i=0;i<y.length;i++){
        
        y1[i]=Integer.parseInt( y[i] );
        
    }
    
    String z[]=in.readLine().split("\\s");
    
    int z1[]=new int[z.length];
    
    for(int i=0;i<z.length;i++){
        
        z1[i]=Integer.parseInt( z[i] );
        
    }
    
   // mergeSort( y1,0,y1.length-1 );
    
   // mergeSort( z1,0,z1.length-1 );
    
    for(int i=0;i<y.length/2;i++){
        
        int temp=y1[i];
        
        y1[i]=y1[ y1.length-i-1 ];
        
        y1[y1.length-i-1]=temp;
        
    }
    
    for(int i=0;i<z.length/2;i++){
        
        int temp=z1[i];
        
        z1[i]=z1[ z1.length-i-1 ];
        
        z1[ z1.length-i-1 ]=temp;
        
    }
    
    StackLinkedList stackA=new StackLinkedList();
    
    StackLinkedList stackB=new StackLinkedList();
    
    for(int i: y1){
        
        stackA.push( (i) );
        
    }
    
    for(int i: z1){
        
        stackB.push( (i) );
        
    }
    
    StackLinkedList stackSum=new StackLinkedList();
    
    int i=0,count=0,localSum=0;
    
    while( !stackA.isEmpty() ){
        
        int remove=stackA.pop();
        
        localSum+=remove;
        
        if( localSum>k ){
            
            break;
            
        }
       
     //   count++;
        
        stackSum.push(localSum);
        
        count++;
        
    }
    
     //   System.out.println("stacksum size: "+stackSum.size()+" peek: "+stackSum.peek());
    
    int max=count;
    
    localSum=0;
    
    while( !stackB.isEmpty() ){
        
        int remove=stackB.pop();
       
        localSum+=remove;
        
        if( localSum > k ){
            
            break;
            
        }
        
        if( !stackSum.isEmpty() && localSum+stackSum.peek()>k ){
            
            if( count>max ){
                
                max=count;
                
            }
            
            while( !stackSum.isEmpty() && localSum+stackSum.peek()>k ){
                
                count--;
                
            //    System.out.println("am here");
                
                stackSum.pop();
                
            }
            
        }
        
        count++;
        
    }
    
     //   System.out.println("previous max: "+max);
    
    if( count>max ){
        
        max=count;
        
    }
    
        System.out.println(max);
    
    }
    
    static int findMax( StackLinkedList stack ) throws CloneNotSupportedException, Exception{
        
        StackLinkedList copyStack=(StackLinkedList) stack.clone();
        
        int max=Integer.MIN_VALUE;
        
        while( !copyStack.isEmpty() ){
            
            max=Math.max(max, copyStack.pop());
            
        }
        
        return max;
        
    }
    
    static class Node{
        
        int data;
        
        Node next;

        public Node() {
        
            
        }
        
        public Node(int data) {
            this.data = data;
        
            next=null;
            
        }

        public int getData() {
            return data;
        }

        public void setData(int data) {
            this.data = data;
        }

        public Node getNext() {
            return next;
        }

        public void setNext(Node next) {
            this.next = next;
        }
        
    }
    
    static class StackLinkedList implements Cloneable {
        
        int length;
        
        Node node;

        public StackLinkedList() {
        
            length=0;
            
            node=null;
            
        }
        
        public void push( int data ){
            
            Node top=new Node(data);
            
            top.setNext(node);
            
            node=top;

length++;
            
        }
        
        public boolean isEmpty(){
            
            return length==0;
            
        }
        
        public int pop() throws Exception {
            
            if( isEmpty() ){
                
                throw new Exception("The list is empty");
                
            }
            
            int res=node.getData();
            
            node=node.next;
         
            length--;
            
            return res;
        }

public int size(){
    
    return length;
    
}
        
public int peek() throws Exception{
    
    if( isEmpty() ){
        
    //    throw new Exception("The list has no element");
      
    return -1;
    
    }
    
    return node.getData();
    
}

        @Override
        protected Object clone() throws CloneNotSupportedException {
            //return super.clone(); //To change body of generated methods, choose Tools | Templates.

            try{
            
            StackLinkedList stack=(StackLinkedList)super.clone();
            
            return stack;
            
            }catch(CloneNotSupportedException e){
                
        //        throw new Exception("The list is empty");
                
                return this;
                
            }
            
        }

    }
    
    public static void main(String[] args) throws IOException, Exception {
        
    testCases=Integer.parseInt( in.readLine() );
        
    for(int i=0;i<testCases;i++){
        
        solve();
        
    }
    
    }
    
}
/*

1
5 4 10
4 2 4 6 1
2 1 8 5

*/

/*

1
17 26 62
7 15 12 0 5 18 17 2 10 15 4 2 9 15 13 12 16
12 16 6 8 16 15 18 3 11 0 17 7 6 11 14 13 15 6 18 6 16 12 16 11 16 11

*/

/*

1
31 34 5
4 11 16 0 18 17 9 13 7 12 16 19 2 15 5 13 1 10 0 8 0 6 16 12 15 7 1 6 19 16 2
15 8 11 16 6 0 5 11 7 9 8 6 3 3 4 8 17 14 9 5 15 15 1 19 10 0 12 8 11 9 11 18 17 14

*/

/*

1
25 14 55
11 6 1 13 14 7 8 10 3 17 7 18 6 4 5 13 17 4 16 9 17 16 12 6 7
10 15 13 17 10 7 0 16 8 13 11 8 14 13

*/

/*

1
20 35 67
19 9 8 13 1 7 18 0 19 19 10 5 15 19 0 0 16 12 5 10
11 17 1 18 14 12 9 18 14 3 4 13 4 12 6 5 12 16 5 11 16 8 16 3 7 8 3 3 0 1 13 4 10 7 14

*/

/*

1
37 50 64
15 5 18 19 19 2 4 17 7 16 14 5 19 2 5 7 5 12 15 1 7 8 2 12 12 4 19 18 1 11 2 16 16 0 7 7 15
3 5 14 19 19 19 18 1 16 17 6 0 13 19 7 1 1 12 5 6 11 3 19 14 5 7 3 18 14 10 13 10 15 19 9 14 11 0 7 7 17 6 8 10 5 7 3 7 19 8

*/
