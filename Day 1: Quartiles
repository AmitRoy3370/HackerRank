import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;

class Result {

    /*
     * Complete the 'quartiles' function below.
     *
     * The function is expected to return an INTEGER_ARRAY.
     * The function accepts INTEGER_ARRAY arr as parameter.
     */

static int median(int a[],int start,int end){
    
    int length=end-start+1;
    
    int m;
    
    if( length%2!=0 ){
        
        m=a[ start+length/2 ];
        
    }else{
        
        m=(a[ start+length/2-1 ]+a[start+length/2 ])/2;
        
    }
    
    return m;
    
}

    public static List<Integer> quartiles(List<Integer> arr) {
    // Write your code here

int a[]=new int[arr.size() ];

int n=a.length;

int in=0;

for(int i: arr){
    
    a[in++]=i;
    
}

Arrays.sort(a);

List<Integer> ans=new ArrayList<>();

ans.add( median( a,0,n/2-1 ) );

ans.add( median( a,0,n-1 ) );

if( n%2==0 ){
    
    ans.add( median( a,n/2,n-1 ) );
    
}else{
    
    ans.add( median(a,n/2+1,n-1 ) );
    
}

return ans;

    }

}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int n = Integer.parseInt(bufferedReader.readLine().trim());

        String[] dataTemp = bufferedReader.readLine().replaceAll("\\s+$", "").split(" ");

        List<Integer> data = new ArrayList<>();

        for (int i = 0; i < n; i++) {
            int dataItem = Integer.parseInt(dataTemp[i]);
            data.add(dataItem);
        }

        List<Integer> res = Result.quartiles(data);

        for (int i = 0; i < res.size(); i++) {
            bufferedWriter.write(String.valueOf(res.get(i)));

            if (i != res.size() - 1) {
                bufferedWriter.write("\n");
            }
        }

        bufferedWriter.newLine();

        bufferedReader.close();
        bufferedWriter.close();
    }
}
