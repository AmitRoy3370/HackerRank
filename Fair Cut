import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class Fair_Cut {

    static int n,k;
    
    static BufferedReader in=new BufferedReader( new InputStreamReader( System.in ) );
    
    public static void main(String[] args) throws IOException {
        
        String x[]=in.readLine().split("\\s");
        
        n=Integer.parseInt( x[0] );
        k=Integer.parseInt( x[1] );
        
        String y[]=in.readLine().split("\\s");
        
        long a[]=new long[y.length];
        
        for(int i=0;i<y.length;i++){
            
            a[i]=Long.parseLong( y[i] );
            
        }
        
        solve(a,k);
        
    }

    static void merge(long a[],int left,int right,int mid){
        
        int n1=mid-left+1;
        
        int n2=right-mid;
        
        long L[]=new long[n1];
        long R[]=new long[n2];
        
        for(int i=0;i<n1;i++){
            
            L[i]=a[left+i];
            
        }
        
        for(int j=0;j<n2;j++){
            
            R[j]=a[mid+1+j];
            
        }
        
        int i=0,j=0,k1=left;
        
        while( i<n1 && j<n2 ){
            
            if( L[i]<=R[j] ){
                
                a[k1]=L[i];
                
                i++;
                
            }else{
                
                a[k1]=R[j];
                
                j++;
                
            }
            
            k1++;
            
        }
        
        while( i<n1 ){
            
            a[k1]=L[i];
            
            i++;
            k1++;
            
        }
        
        while( j<n2 ){
            
            a[k1]=R[j];
            
            j++;
            k1++;
            
        }
        
    }
    
    static void mergeSort(long a[],int left,int right){
        
        if( left>=right ){
            
            return;
            
        }
        
        int mid=(left+right)/2;
        
        mergeSort(a,left,mid);
        
        mergeSort( a,mid+1,right );
        
        merge( a,left,right,mid );
        
    }
    
    private static void solve(long[] a, int k) {
    //    throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    
    if( k>n/2 ){
        
        k=n-k;
        
    }
    
    mergeSort( a,0,a.length-1 );
    
   // int n=a.length;
    
    long dp[][]=new long[n+1][n+1];
    
    for(int i=0;i<=n;i++){
        
        for(int j=0;j<=n;j++){
            
            dp[i][j]=Long.MAX_VALUE;
            
        }
        
    }
    
    dp[0][0]=0;
    
    for(int i=0;i<n;i++){
        
        for(int j=0;j<i+1;j++){
            
            if( j>k || n-k<i-j ){
                
                continue;
                
            }
            
            long tempLi=dp[i][j] + a[i] * (i - j - (n - k - (i - j)));
            
            long tempLu=dp[i][j] + a[i] * (j - (k - j));
            
            if( dp[i+1][j+1]>tempLi ){
                
                dp[i+1][j+1]=tempLi;
                
            }
            
            if( dp[i+1][j]>tempLu ){
                
                dp[i+1][j]=tempLu;
                
            }
            
        }
        
    }
    
        System.out.println( dp[n][k] );
    
    }
    
}
/*

4 2
4 3 1 2

*/

/*

4 1
3 3 3 1

*/

/*

20 11
691259308 801371251 345390019 162749471 998969126 308205008 430442891 404642721 532566673 266540863 702197285 749105392 775025448 20453591 582291534 132855413 747557193 129094259 474372133 788391070

*/
