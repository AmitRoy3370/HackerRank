import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.StringTokenizer;
import java.util.logging.Level;
import java.util.logging.Logger;

public class Active_Traders {

    static int n;
    
    static FastRead fast=new FastRead();
    
    static List<String> list=new ArrayList<>();
    
     public static List<String> mostActive(List<String> customers) {
    // Write your code here

    Map<String,Double> map=new HashMap<>();
    
    for(String i: customers){
        
        map.put(i, 0.0);
        
    }
    
    for(String i: customers){
        
        double y=map.get(i);
        
        map.put(i, y+1.0);
        
    }
    
    double total=customers.size();
    
    List<String> valid=new ArrayList<>();
    
       //  System.out.println("map: "+map.toString());
    
   for(String i: map.keySet()){
       
       double k=(map.get(i));
       
   //    System.out.println("k: "+k);
       
       double percent=(k/total)*100.00;
     
     //  System.out.println("percent: "+percent);
       
       if( percent>=5.00 ){
           
           valid.add(i);
           
       }
       
   }
    
   Collections.sort(valid);
   
      //   System.out.println("valid size: "+valid.size());
   
    return valid;
    
    }
    
    public static void main(String[] args) {
        
        n=fast.nextInt();
        
   for(int i=0;i<n;i++){
       
       list.add( fast.next() );
       
   }
    
     //   System.out.println("basic liszt: "+list.toString());
    
        System.out.println( mostActive( list ).toString() );
    
    }
    
    static class FastRead{
        
        BufferedReader in;
        StringTokenizer st;

        public FastRead() {
        
            in=new BufferedReader( new InputStreamReader( System.in ) );
            
        }
        
        String nextLine(){
            
            String st="";
            
            try {
                st=in.readLine();
            } catch (IOException ex) {
                Logger.getLogger(Active_Traders.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            return st;
            
        }
        
        String next(){
            
            while( st==null || !st.hasMoreElements() ){
                
                try {
                    st=new StringTokenizer( in.readLine() );
                } catch (IOException ex) {
                    Logger.getLogger(Active_Traders.class.getName()).log(Level.SEVERE, null, ex);
                }
                
              //  System.out.println("blocked at here");
                
            }
            
            return st.nextToken();
            
        }
        
        int nextInt(){
            
            return Integer.parseInt( next() );
            
        }
        
        long nextLong(){
            
            return Long.parseLong( next() );
            
        }
        
    }
    
}
/*

20
Alpha
Omega
Alpha
Omega
Alpha
Omega
Alpha
Omega
Alpha
Omega
Alpha
Omega
Alpha
Omega
Alpha
Omega
Alpha
Omega
Beta

*/

/*

21
Beta
Zeta
Beta
Zeta
Zeta
Epsilon
Beta
Zeta
Beta
Zeta
Beta
Delta
Zeta
Beta
Zeta
Beta
Zeta
Beta
Zeta
Beta

*/
