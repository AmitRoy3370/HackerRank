import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Scanner;

/*class triangl implements Comparable<triangl>{
    
    int a,b,c;

    public triangl() {
        
    }

    public triangl(int a, int b, int c) {
        this.a = a;
        this.b = b;
        this.c = c;
    }

    public int getA() {
        return a;
    }

    public void setA(int a) {
        this.a = a;
    }

    public int getB() {
        return b;
    }

    public void setB(int b) {
        this.b = b;
    }

    public int getC() {
        return c;
    }

    public void setC(int c) {
        this.c = c;
    }

    @Override
    public String toString() {
    
        return  c + " " + b + " " + a ;
    
    }

    @Override
    public int compareTo(triangl t) {
    //    throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
   
    if( (this.getA()+this.getB()+this.getC())>(t.getA()+t.getB()+t.getC()) ){
        
        return 1;
        
    }else  if( (this.getA()+this.getB()+this.getC())<(t.getA()+t.getB()+t.getC()) ){
        
        return 1;
        
    }else{
        
        return 0;
        
    }
    
    }
    
   
}*/

public class Maximum_Perimeter_Triangle {
    
    static Scanner scanner=new Scanner(System.in);
    
    static int n;
    
    static List<Integer> list=new ArrayList<>();
    
   // static List<triangl> summation=new ArrayList<>();
    
   // static triangl t=new triangl();
    
    public static void main(String[] args) {
        
       n=scanner.nextInt();
       
       for(int i=0;i<n;i++){
           
           list.add(i,scanner.nextInt());
           
       }
        
       Collections.sort(list,Collections.reverseOrder());
       
       int i=0;
       
       int y=0;
       
       for( i=0;i<list.size()-2;i++){
           
           if( list.get(i+1)+list.get(i+2)>list.get(i) ){
               
           //    t=new triangl( list.get(i),list.get(i+1),list.get(i+2) );
               
             //  summation.add(t);
       
              System.out.println(list.get(i+2)+" "+list.get(i+1)+" "+list.get(i));
             
             y+=1;
             
             break;
             
           }else{
               
               //System.out.println(-1);
               y=0;
               //System.exit(0);
               
              // break;
               
           }
           
       }
       
       if(y==0){
           
           System.out.println(-1);
           
           System.exit(0);
           
       }
       
       
       
      // Collections.sort(summation,Collections.reverseOrder());
       
        //System.out.println(summation.get(0));
       
    }
       
}
