import java.util.Scanner;

public class Insertion_Sort_Advanced_Analysis {
    
    static Scanner scanner=new Scanner(System.in);
    
    static int testCases,n;
    
    static void binarySearch(int a[],int start,int mid,int end){
        
      int n1=mid-start+1;  
      int n2=end-mid;  
      
      int []left=new int[n1];
      int []right=new int[n2];
      
      for(int i=0;i<n1;i++){
          
          left[i]=a[start+i];
          
      }
      
      for(int j=0;j<n2;j++){
          
          try{
          
          right[j]=a[mid+j+1];
          
          }catch(Exception e ){
              
              
          }
          
      }
      
      int i=0,j=0,k=start;
      
      while( i<n1 && j<n2 ){
          
          if( left[i]<=right[j] ){
              
              a[k]=left[i];
              
              i++;
              
          }else{
              
              a[k]=right[j];
              
          //    if(!(i<left.length && j<right.length)){
             
                  count+=left.length-i;
              
            //  }
              
              j++;
              
          }
       //   System.out.println("i blocked");   
          k++;
          
      }
    
    //    System.out.println("i: "+i+" k: "+k);
      
      while(i<n1){

try{
          
          a[k]=left[i];
          i++;
          k++;
    
}catch(Exception e ){
    
  //  System.out.println("I blocked");
    
  i++;
  
}
          
      }
      
      while(j<n2){
          
          a[k]=right[j];
          j++;
          k++;
          
    //      count+=left.length-i;
          
      }
      
      //  System.out.println("a: "+Arrays.toString(a));
      
      // return 0;
        
    }
    
    static long count=0;
    
    static void findAnswer(int a[],int start,int end){
        
        if( start>=end ){
            
            return;
            
        }
        
        int mid=(start+end-1)/2;
        
        findAnswer(a,start,mid);
        findAnswer(a,mid+1,end  );
        binarySearch(a,start,mid,end);
      
    }
    
    static void solve(int a[],int n){
        
        count=0;
        
            findAnswer( a,0,n-1 );

            System.out.println(count);
           
    }
    
    public static void main(String[] args) {
        
        testCases=scanner.nextInt();
        
        for(int i=0;i<testCases;i++){
            
            n=scanner.nextInt();
         
    int a[]=new int[n];      
            
    for(int j=0;j<n;j++){
        
        a[j]=scanner.nextInt();
        
    }
    
    solve(a,n);
    
        }
        
    }
    
}
/*1
7
12 15 1 5 6 14 11

2
5
1 1 1 2 2
5
2 1 3 1 2

*/
